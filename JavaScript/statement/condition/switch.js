// 1.3 switch

// if 문은 프로그램 실행 흐름에 분기점을 만들고, else if를 써서 분기점을 여럿 만들 수 있습니다.
// 하지만 모든 분기점이 같은 표현식의 값에 좌우된다면, else if가 최선의 선택이 아닐 수도 있습니다.
// => 코드상으로 낭비가 될 수 있습니다.
// 똑같은 표현식을 여러 if 문이 반복해 평가하는 것은 낭비입니다.

// switch 문으로 똑같은 상황에 대응할 수 있습니다.
// switch 문은 switch 키워드 뒤에 괄호를 들러싼 표현식을 쓰고
// 그 뒤에 중괄호로 감싼 코드 블록을 쓰는 형태입니다.

switch (expression) {
    statements;
}

// switch 문의 정확한 문법은 이보다 복잡합니다.
// 코드 블록 곳곳에 case 키워드를 쓰고 그 뒤에 표현신과 콜론을 붙일 수 있습니다.
// switch 문이 실행되면 먼저 expression의 값을 계산한 후
// case 라벨의 표현식 중에서 expression과 같은 값으로 평가되는 것을 찾습니다.

// 이때, "같은" 값은 === 연산자(일치 연산자)를 기준으로 판단합니다.
// 일치하는 것을 찾으면 해당 case 코드 블록을 실행하기 시작합니다.
// 일치하는 case를 찾지 못하면 default: 라벨을 찾습니다.
// default: 라벨 조차 없으면 switch 문은 코드 블록 전체를 건너 뜁니다. => code pass

switch (n) {
    case 1: // n === 1이면 여기서 시작합니다.
        // 코드 블록 #1을 실행합니다.
        break; // 여기서 멈춥니다.
    case 2: // n === 2이면 여기서 시작합니다.
        // 코드 블록 #2를 실행합니다.
        break; // 여기서 멈춥니다.
    case 3: // n === 3이면 여기서 시작합니다.
        // 코드 블록 #3을 실행합니다.
        break; // 여기서 멈춥니다.
    default:
        // 코드 블록 #4를 실행합니다.
        break; // 여기서 멈춥니다.
}

// 이 코드에서는 각 case의 마지막에 break 키워드를 썼습니다.
// break 문은 switch 문의 끝으로 빠져나가서 이어지는 문을 실행하게 하는 명령어입니다.

let drink = prompt("가격 조회를 원하는 음료수를 입력하세요. (콜라, 사이다, 커피 중 선택하세요!)", "");

switch (drink) {
    case "콜라":
        console.log("콜라는 1,000원 입니다.");
        break;
    case "사이다":
        console.log("사이다는 2,000원 입니다.");
        break;
    case "커피":
        console.log("커피는 3,000원 입니다.");
        break;
    default:
        console.log("잘못된 단어 입력");
        break;
}

console.log("코드 패스 발생!?");
