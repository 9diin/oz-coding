// 데이터형

// 1. 기본 데이터형 (Basic Data Types)

// MongoDB의 도큐먼트는 여러 가지 데이터형(data type) 을 사용할 수 있습니다.
// 각 필드(field)는 특정한 데이터형의 값을 가집니다.
// 예를 들어 숫자, 문자열, 날짜, 배열, 객체 등이 있습니다.

// 1.1 null

// null은 값이 없음을 나타내는 데이터형입니다.
// 즉, 특정 필드가 있지만 값이 비어 있거나 알 수 없을 때 사용합니다.

// 또한, null은 존재하지 않는 필드와도 비슷하게 동작할 수 있습니다.
// 예를 들어 다음 도큐먼트를 보겠습니다.

{ "x": null }

// 이 도큐먼트는 "x"라는 필드가 있지만, 그 값이 null임을 나타냅니다.
// 즉, "x"라는 필드는 존재하지만 안에 들어 있는 값이 없는 상태입니다.

{ "x": null } // => "x" 필드는 존재하지만 값이 null
{} // => "x" 필드 자체가 존재하지 않음

// 이 두 가지는 비슷해 보이지만 의미가 다릅니다.

// 첫 번째 도큐먼트에는 "x"라는 필드가 있음
// 두 번째 도큐먼트에는 "x"라는 필드가 아예 없음

// 다음은 users 컬렉션에 사용자의 이메일 정보가 아직 없는 경우를 나타내는 예시입니다.
db.users.insertOne({
    "name": "Kim",
    "email": null
});
// 이 경우 "email" 필드는 존재하지만, 아직 값이 정해지지 않았음을 의미합니다.

// 1.2 불리언
// 불리언(Boolean) 데이터형은 참(true) 과 거짓(false) 두 가지 값만 가질 수 있는 자료형입니다.
// 주로 조건을 표현하거나 논리적인 판단을 할 때 사용합니다.

{ "x": true }
{ "y": false }

// 예를 들어, 게시글의 공개 여부를 나타내는 필드가 있다고 가정해 보겠습니다.
db.posts.insertOne({
    "title": "첫 번째 글",
    "isPublic": true
});

// 이 경우 "isPublic" 필드가 true이므로,
// 이 글은 공개된 상태임을 의미합니다.

db.users.insertOne({
    "name": "Lee",
    "isLoggedIn": false
});

// 여기서는 "isLoggedIn" 필드가 false이므로,
// 현재 사용자가 로그인하지 않은 상태임을 나타냅니다.

// 1.3 문자열
// 텍스트(문자 데이터)를 저장합니다.
{ "title": "Star Wars" }

// 문자열은 항상 큰따옴표(" ")로 감싸야 합니다.
// UTF-8 인코딩을 사용하므로 한글도 저장할 수 있습니다.
db.users.insertOne({
    "name": "Kim",
    "city": "Seoul"
});

// 1.4 날짜 (Date)
// 날짜와 시간을 저장합니다.
{ "createdAt": new Date() }

// 자바스크립트의 Date 객체를 사용합니다.
// 시간 정보까지 함께 저장됩니다.
// 날짜를 비교하거나 정렬하는 데 자주 사용됩니다.

db.orders.insertOne({
    "item": "Book",
    "orderedAt": new Date()
});

// 1.5 배열 (Array)
// 여러 개의 값을 한 필드에 순서대로 저장할 때 사용합니다.
{ "tags": ["action", "fantasy", "space"] }

// 배열 안에는 문자열, 숫자, 객체 등 다양한 데이터형을 함께 넣을 수 있습니다.
// 배열 안의 특정 요소를 쿼리로 검색할 수도 있습니다.

db.movies.insertOne({
    "title": "Star Wars",
    "genres": ["Action", "Adventure", "Sci-Fi"]
});

// 1.6 내장 도큐먼트
// 도큐먼트 안에 또 다른 도큐먼트를 포함하는 구조입니다.
{
    "title": "Star Wars",
    "director": {
        "name": "George Lucas",
        "birthYear": 1944
    }
}

// 관계형 데이터베이스의 “하위 테이블” 대신, 관련 데이터를 한 도큐먼트에 함께 저장할 수 있습니다.
// 계층적인 구조를 만들 수 있어 데이터 조회가 간단해집니다.

// 1.7 객체 ID
// MongoDB에서 각 도큐먼트를 식별하기 위한 고유한 ID입니다.

// 도큐먼트를 컬렉션에 삽입할 때 자동으로 생성됩니다.
// _id 필드는 기본 키 역할을 하며, 각 도큐먼트마다 고유합니다.
// 필요하다면 수동으로 지정할 수도 있습니다.

db.movies.insertOne({
    "_id": ObjectId(),
    "title": "Star Wars"
});
