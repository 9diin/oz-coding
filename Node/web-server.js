// 웹 서버란?
// 웹 서버는 텍스트, 이미지, 비디오 및 애플리케이션 데이터와 같은 웹 사이트 콘텐츠를 요청하는 클라이언트에 전달합니다.
// 가장 일반적인 유형의 클라이언트는 사용자가 링크를 클릭하거나 브라우저에 표시된 페이지에서 문서를 다운로드할 때 웹 사이트에서 데이터를 요청하는 웹 브라우저 프로그램입니다.

// 웹 서버는 HTTP(Hypertext Transfer Protocol)를 사용하여 웹 브라우저와 통신합니다.
// 대부분의 웹 페이지 콘텐츠는 HTML(Hypertext Markup Language)로 인코딩합니다. 콘텐츠는 정적 또는 동적일 수 있습니다.
// 동적 콘텐츠를 제공하기 위해 대부분의 웹 서버는 비즈니스 논리를 통신으로 인코딩하는 서버 측 스크립팅 언어를 지원합니다.

// 웹 서버는 일반적으로 요청되는 콘텐츠의 전달 속도를 높이기 위해 콘텐츠를 캐시할 수도 있습니다.
// 이 프로세스를 웹 가속이라고도 합니다.

// 브라우저가 웹 서버에서 호스팅 되는 파일을 필요로 할 때마다 브라우저는 HTTP를 통해 파일을 요청합니다.
// 요청이 올바른 웹 서버에 도달하면 HTTP 서버는 요청을 수락하고 요청된 문서를 찾아 HTTP를 통해 브라우저로 다시 보냅니다.

// 1. 웹 서버란?
// 웹 서버는 "요청을 받고, 응답을 보내는 프로그램" 입니다.
// 브라우저(클라이언트)가 요청(Request)을 보내면
// 서버는 요청을 받아서 적절한 데이터를 응답(Response)으로 돌려줍니다.

// 예를 들어,
// 사용자가 브라우저 주소창에 https://example.com을 입력하면
// 브라우저는 example.com 서버에 요청을 보냅니다.
// 웹 서버는 그 요청을 받고, index.html 파일을 찾아서 응답으로 돌려줍니다.

// 이게 바로 "웹 서버의 기본 역할"입니다.

// 2. 웹 서버는 HTTP로 대화합니다.
// 클라이언트(브라우저)와 서버는 'HTTP(Hypertext Transfer Protocol)'라는 약속된 규칙으로 통신합니다.
// 즉, "어떻게 요청하고, 어떻게 응답할지"를 정해둔 언어 같은 겁니다.


// 브라우저가 보낸 요청의 예시:
GET /index.html HTTP/1.1
Host: example.com

// 서버가 보낸 응답의 예시:
HTTP/1.1 200 OK

// 3. 정적 콘텐츠 vs 동적 콘텐츠

// 웹 서버가 전달하는 데이터는 두 가지로 나뉩니다.
// - 정적 콘텐츠: 미리 저장된 파일 (HTML, 이미지, CSS 등)
// - 동적 콘텐츠: 요청할 때 서버가 즉석에서 만들어주는 데이터 (예: 로그인 결과, 게시글 목록)

// Node.js나 PHP, Python 같은 서버 사이드 언어가
// 바로 이런 '동적 콘텐츠'를 만들어내는 역할을 합니다.

// “정적 콘텐츠는 ‘미리 만들어둔 파일’,
// 동적 콘텐츠는 ‘요청할 때 만들어지는 결과’예요.
// 로그인 결과나 데이터베이스에서 불러온 정보가 전형적인 동적 콘텐츠죠.”

// 4. 캐싱(Caching)

// 웹 서버는 자주 요청되는 파일을 '캐시(cache)'에 저장해두고,
// 다음에 같은 요청이 오면 더 빠르게 전달할 수 있습니다.

// 이걸 '웹 가속(Web Acceleration)'이라고 부릅니다.

// 5. 한 줄로 정리하자면
// “브라우저는 ‘요청하는 쪽’,
// 서버는 ‘응답하는 쪽’이에요.

// ‘웹 서버’는 이 응답을 담당하는 프로그램입니다.
// 예를 들어 우리가 URL을 입력하면,
// 그 주소에 맞는 HTML 파일이나 데이터를 찾아서 돌려주는 게 바로 웹 서버예요.

// 그리고 이 요청과 응답은 HTTP라는 약속된 언어로 주고받습니다.”
